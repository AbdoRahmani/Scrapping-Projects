#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
In this problem set you work with cities infobox data, audit it, come up with a
cleaning idea and then clean it up. In the first exercise we want you to audit
the datatypes that can be found in some particular fields in the dataset.
The possible types of values can be:
- NoneType if the value is a string "NULL" or an empty string ""
- list, if the value starts with "{"
- int, if the value can be cast to int
- float, if the value can be cast to float, but CANNOT be cast to int.
   For example, '3.23e+07' should be considered a float because it can be cast
   as float but int('3.23e+07') will throw a ValueError
- 'str', for all other values

The audit_file function should return a dictionary containing fieldnames and a 
SET of the types that can be found in the field. e.g.
{"field1": set([type(float()), type(int()), type(str())]),
 "field2": set([type(str())]),
  ....
}
The type() function returns a type object describing the argument given to the 
function. You can also use examples of objects to create type objects, e.g.
type(1.1) for a float: see the test function below for examples.

Note that the first three rows (after the header row) in the cities.csv file
are not actual data points. The contents of these rows should note be included
when processing data types. Be sure to include functionality in your code to
skip over or detect these rows.
"""
from collections import defaultdict
import csv
import pprint


CITIES = 'cities.csv'


     
def get_type(value): 

    try:
        int(value)
        return "Integer"
    except ValueError:
        pass
    
    try:
        float(value)
        return "float"
    except ValueError:
        pass
    
    if value == "NULL":
        return "Null"
    elif value.startswith("{"):
        return "List"
    else:      
        return "String"
   

 


# Open the CSV file
with open(CITIES, "r",encoding="utf-8") as f:
    # Create a DictReader object
    reader = csv.DictReader(f)
    header = reader.fieldnames
    fields = [field for field in header]
    columns = defaultdict(list)
    for count ,row in enumerate(reader):

        if count > 2:
            for (k,v) in row.items(): # go over each column name and value 
                columns[k].append(v)
                
    result = {}            
    for field in fields:
        types = set()
        values = columns[field]
        for value in values:
            types.add(get_type(value))
        result[field] = types  
def fix_name(name):
    english_alph = ['|',' ','A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z','a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']

    clean_name=''.join(letter for letter in name if letter  in english_alph)

        # Remove leading and trailing whitespaces
    cleaned_string = clean_name.strip()

    # Check if the cleaned string is "NULL"
    if cleaned_string.lower() == "null" :
        return []  # Return an empty list
    elif cleaned_string == '':
        return []  # Return an empty list
    # Split the cleaned string by pipe and return as a list
    list_of_names = cleaned_string.split("|")
    fixed_name=[]
    for i in list_of_names:
        if i != '':
            fixed_name.append(i)
    return fixed_name

def process_file(filename):
    

    data = []
    with open(filename, "r",encoding="utf-8") as f:
        reader = csv.DictReader(f)
        # processing file
        for count, line in enumerate(reader):
            if count>2:
                # calling your function to fix the area value
                if "name" in line:
                    line["name"] = fix_name(line["name"])
                data.append(line)
    return data


def test():
    data = process_file(CITIES)

    print( "Printing 20 results:")
    for n in range(2000):
        pprint.pprint(data[n]["name"])
    """
    assert data[14]["name"] == ['Negtemiut', 'Nightmute']
    assert data[9]["name"] == ['Pell City Alabama']
    assert data[3]["name"] == ['Kumhari']
    """
if __name__ == "__main__":
    test()
